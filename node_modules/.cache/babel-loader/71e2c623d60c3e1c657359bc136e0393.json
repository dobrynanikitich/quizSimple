{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tatianabahmatovic/quizSimple/quizSimple/src/components/actualQuizGame/ActualQuizGame.js\";\nimport React, { Component } from 'react';\nimport classes from './ActualQuizGame.module.scss';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Button from '../button/Button';\nimport GameOverModal from '../modals/GameOverModal';\nimport QuizCard from '../quizCard/QuizCard';\nimport Timer from '../timer/Timer';\n\nclass CountryQuiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentEl: 0,\n      isLoading: this.sortedCountriesList ? false : true,\n      answers: [],\n      currentPoints: 6,\n      isRightAnswerDone: false,\n      isGameOver: false\n    };\n\n    this.randomSort = () => {\n      return 0.5 - Math.random();\n    };\n\n    this.createAnswerVariants = () => {\n      let {\n        answers,\n        sortedCountriesList,\n        currentEl\n      } = this.state;\n      const {\n        currentQuizType\n      } = this.props;\n      let currentObjectField;\n\n      switch (currentQuizType) {\n        case 'country':\n          currentObjectField = 'Name';\n          break;\n\n        case 'flag':\n          currentObjectField = 'Flag';\n          break;\n\n        case 'currency':\n          currentObjectField = 'CurrencyName';\n          break;\n\n        case 'area':\n          currentObjectField = 'Area';\n          break;\n      }\n\n      answers = [];\n      answers.push(sortedCountriesList[currentEl]);\n\n      do {\n        let num = Math.floor(Math.random() * 250);\n\n        if (num === currentEl || answers.find(item => item[currentObjectField] === sortedCountriesList[num][currentObjectField])) {\n          continue;\n        } else {\n          answers.push(sortedCountriesList[num]);\n        }\n      } while (answers.length !== 4);\n\n      this.setState({\n        answers: answers.sort(this.randomSort)\n      });\n    };\n\n    this.nextQuestionHandler = () => {\n      const {\n        isRightAnswerDone\n      } = this.state;\n\n      if (!isRightAnswerDone) {\n        return;\n      } else {\n        this.setState(prevState => {\n          return {\n            currentEl: prevState.currentEl + 1,\n            currentPoints: 6,\n            isRightAnswerDone: false\n          };\n        }, () => this.createAnswerVariants());\n      }\n    };\n\n    this.returnToMainPageHandler = () => {\n      const {\n        changeState,\n        currentQuizType,\n        isLogin\n      } = this.props;\n      changeState('initialState');\n      changeState('currentQuizType', currentQuizType);\n      changeState('isLogin', isLogin);\n    };\n\n    this.checkAnswerHandler = (e, isCorrectAnswer) => {\n      const {\n        sortedCountriesList,\n        currentEl,\n        currentPoints\n      } = this.state;\n      const {\n        changeState,\n        currentScore,\n        currentQuizType\n      } = this.props;\n      const {\n        target\n      } = e;\n      let currentObjectField;\n\n      switch (currentQuizType) {\n        case 'country':\n          currentObjectField = 'Name';\n          break;\n\n        case 'flag':\n          currentObjectField = 'Flag';\n          break;\n\n        case 'currency':\n          currentObjectField = 'CurrencyName';\n          break;\n\n        case 'area':\n          currentObjectField = 'Area';\n          break;\n      }\n\n      if (isCorrectAnswer) {\n        changeState('currentScore', currentPoints + currentScore);\n        this.setState({\n          isRightAnswerDone: true\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            currentPoints: prevState.currentPoints - 2\n          };\n        });\n      }\n    };\n\n    this.timeIsLeftHadler = () => {\n      this.setState({\n        isGameOver: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      countriesList\n    } = this.props;\n    const sortedCountriesList = countriesList.sort(this.randomSort);\n    this.setState({\n      sortedCountriesList: sortedCountriesList,\n      isLoading: false\n    }, () => this.createAnswerVariants());\n  }\n\n  render() {\n    const {\n      isLoading,\n      currentEl,\n      answers,\n      isRightAnswerDone,\n      sortedCountriesList,\n      isGameOver\n    } = this.state;\n    const {\n      currentQuizType,\n      currentScore\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.CountryQuiz,\n      children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(GameOverModal, {\n          currentScore: currentScore,\n          returnToMainPageHandler: this.returnToMainPageHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), !isGameOver && (isLoading ? /*#__PURE__*/_jsxDEV(ClipLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 46\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer, {\n          timeIsLeftHadler: this.timeIsLeftHadler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(QuizCard, {\n          currentQuizType: currentQuizType,\n          currentEl: currentEl,\n          answers: answers,\n          sortedCountriesList: sortedCountriesList,\n          isRightAnswerDone: isRightAnswerDone,\n          checkAnswerHandler: this.checkAnswerHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          click: this.nextQuestionHandler,\n          buttonName: 'next'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          click: this.returnToMainPageHandler,\n          buttonName: 'refresh'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CountryQuiz;","map":{"version":3,"sources":["/Users/tatianabahmatovic/quizSimple/quizSimple/src/components/actualQuizGame/ActualQuizGame.js"],"names":["React","Component","classes","ClipLoader","Button","GameOverModal","QuizCard","Timer","CountryQuiz","state","currentEl","isLoading","sortedCountriesList","answers","currentPoints","isRightAnswerDone","isGameOver","randomSort","Math","random","createAnswerVariants","currentQuizType","props","currentObjectField","push","num","floor","find","item","length","setState","sort","nextQuestionHandler","prevState","returnToMainPageHandler","changeState","isLogin","checkAnswerHandler","e","isCorrectAnswer","currentScore","target","timeIsLeftHadler","componentDidMount","countriesList","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './ActualQuizGame.module.scss';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport Button from '../button/Button';\nimport GameOverModal from '../modals/GameOverModal';\nimport QuizCard from '../quizCard/QuizCard';\nimport Timer from '../timer/Timer';\n\nclass CountryQuiz extends Component {\n    state = {\n        currentEl: 0,\n        isLoading: this.sortedCountriesList ? false : true,\n        answers: [],\n        currentPoints: 6,\n        isRightAnswerDone: false,\n        isGameOver: false,\n    };\n\n    componentDidMount() {\n        const { countriesList } = this.props; \n        const sortedCountriesList = countriesList.sort(this.randomSort);\n        this.setState({ \n            sortedCountriesList: sortedCountriesList,\n            isLoading: false,\n        }, () => this.createAnswerVariants())\n    }\n\n    randomSort = () =>  {\n        return 0.5 - Math.random();\n    }\n\n    createAnswerVariants = () => {\n        let { answers, sortedCountriesList, currentEl } = this.state;\n        const { currentQuizType } = this.props;\n        let currentObjectField;\n        switch (currentQuizType) {\n            case 'country':\n                currentObjectField = 'Name';\n                break;\n            case 'flag':\n                currentObjectField = 'Flag';\n                break;\n            case 'currency':\n                currentObjectField = 'CurrencyName';\n                break;\n            case 'area':\n                currentObjectField = 'Area';\n                break;\n        }\n        answers = [];\n        answers.push(sortedCountriesList[currentEl]);\n        do {\n            let num = Math.floor((Math.random() * 250));\n            if (num === currentEl || answers.find(item => item[currentObjectField] === sortedCountriesList[num][currentObjectField])) {\n                continue\n            } else {\n                answers.push(sortedCountriesList[num]);\n            }\n        } while (answers.length !== 4)\n        this.setState({ answers: answers.sort(this.randomSort) })\n    }\n\n    nextQuestionHandler = () => {\n        const { isRightAnswerDone } = this.state;\n        if (!isRightAnswerDone) {\n            return;\n        } else {\n            this.setState((prevState) => {\n                return {\n                    currentEl: prevState.currentEl + 1,\n                    currentPoints: 6,\n                    isRightAnswerDone: false,\n                }\n            }, () => this.createAnswerVariants());\n        }\n    }\n\n    returnToMainPageHandler = () => {\n        const { changeState, currentQuizType, isLogin } = this.props;\n        changeState('initialState');\n        changeState('currentQuizType', currentQuizType);\n        changeState('isLogin', isLogin); \n    }\n\n    checkAnswerHandler = (e, isCorrectAnswer) => {\n        const { sortedCountriesList, currentEl, currentPoints } = this.state;\n        const { changeState, currentScore, currentQuizType } = this.props;\n        const { target } = e;\n        let currentObjectField;\n        switch (currentQuizType) {\n            case 'country':\n                currentObjectField = 'Name';\n                break;\n            case 'flag':\n                currentObjectField = 'Flag';\n                break;\n            case 'currency':\n                currentObjectField = 'CurrencyName';\n                break;\n            case 'area':\n                currentObjectField = 'Area';\n                break;\n        }\n        if (isCorrectAnswer) {\n            changeState('currentScore', currentPoints + currentScore);\n            this.setState({ isRightAnswerDone: true });\n        } else {\n            this.setState((prevState) => {\n                return { currentPoints: prevState.currentPoints - 2  }\n            });\n        }\n    }\n\n    timeIsLeftHadler = () => {\n        this.setState({ isGameOver: true })\n    }\n\n    render() {\n        const { isLoading, currentEl, answers, isRightAnswerDone, sortedCountriesList, isGameOver } = this.state;\n        const { currentQuizType, currentScore } = this.props;\n        return (\n            <section className={classes.CountryQuiz}>\n                {isGameOver && \n                    <div>\n                        <GameOverModal \n                            currentScore={currentScore} \n                            returnToMainPageHandler={this.returnToMainPageHandler} />\n                    </div>}\n                {!isGameOver && (isLoading ? <ClipLoader /> : (\n                    <>\n                        <Timer \n                            timeIsLeftHadler={this.timeIsLeftHadler}\n                        />\n                        <QuizCard \n                            currentQuizType={currentQuizType}\n                            currentEl={currentEl}\n                            answers={answers}\n                            sortedCountriesList={sortedCountriesList}\n                            isRightAnswerDone={isRightAnswerDone}\n                            checkAnswerHandler={this.checkAnswerHandler}\n                        />\n                        <Button click={this.nextQuestionHandler} buttonName={'next'} />\n                        <Button click={this.returnToMainPageHandler} buttonName={'refresh'} />\n                    </>\n                ))\n                }\n            </section>\n        )\n    }\n}\n\nexport default CountryQuiz;"]},"metadata":{},"sourceType":"module"}